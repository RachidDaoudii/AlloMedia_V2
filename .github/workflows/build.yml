name: AlloMedia CI/CD

on:
  push:
    branches:
      - rachid

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.12.1"

      - name: Install dependencies
        run: npm install
        working-directory: backend

      - name: run tests
        run: cd backend && npm test

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Tag and push backend image
        uses: docker/build-push-action@v4
        with:
          context: backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backend-image-allomedia:latest

      - name: Tag and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend-image-allomedia:latest

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1  # Replace with your desired AWS region
          aws configure set default.output json

      - name: Login to AWS ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 930296019807.dkr.ecr.us-east-1.amazonaws.com

      - name: Tag and push backend image to AWS ECR
        run: |
          cd backend
          docker build -t backend-allomedia .
          docker tag backend-allomedia:latest 930296019807.dkr.ecr.us-east-1.amazonaws.com/backend-allomedia:latest
          docker push 930296019807.dkr.ecr.us-east-1.amazonaws.com/backend-allomedia:latest

      - name: Tag and push frontend image to AWS ECR
        run: |
          cd frontend
          docker build -t frontend-allomedia .
          docker tag frontend-allomedia:latest 930296019807.dkr.ecr.us-east-1.amazonaws.com/frontend-allomedia:latest
          docker push 930296019807.dkr.ecr.us-east-1.amazonaws.com/frontend-allomedia:latest

      - name: Create ECS Cluster
        run: aws ecs create-cluster --cluster-name default-ecs-cluster
  
      - name: Register ECS Task Definition
        run: |
          echo '{
            "family": "taskallomedia",
            "containerDefinitions": [
              {
                "name": "imagebackend",
                "image": "930296019807.dkr.ecr.us-east-1.amazonaws.com/backend-allomedia",
                "cpu": 0,
                "portMappings": [
                  {
                    "name": "imagebackend-80-tcp",
                    "containerPort": 80,
                    "hostPort": 80,
                    "protocol": "tcp",
                    "appProtocol": "http"
                  },
                  {
                    "name": "imagebackend-3000-tcp",
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp",
                    "appProtocol": "http"
                  }
                ],
                "essential": true,
                "environment": [],
                "environmentFiles": [],
                "mountPoints": [],
                "volumesFrom": [],
                "ulimits": [],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-create-group": "true",
                    "awslogs-group": "/ecs/taskallomedia",
                    "awslogs-region": "us-east-1",
                    "awslogs-stream-prefix": "ecs"
                  },
                  "secretOptions": []
                }
              }
            ],
            "executionRoleArn": "arn:aws:iam::930296019807:role/ecsTaskExecutionRole",
            "networkMode": "awsvpc",
            "cpu": "1024",
            "memory": "3072",
            "requiresCompatibilities": ["EC2"],
            "compatibilities": ["EC2", "FARGATE"]
          }' > ecs-task-definition.json

          aws ecs register-task-definition \
            --cli-input-json "$(cat ecs-task-definition.json)"

      - name: Create ECS Service
        run: |
          aws ecs create-service \
            --cluster default-ecs-cluster \
            --service-name default-ecs-service \
            --task-definition taskallomedia \
            --desired-count 1 \
            --launch-type EC2